#+TITLE: Customizing and extending Emacs Speaks Statistics
#+AUTHOR: Frédéric Santos
#+EMAIL: frederic.santos@u-bordeaux.fr
#+DATE: \today
#+LANGUAGE: en
#+OPTIONS: email:t toc:nil H:3 ^:nil
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LATEX_HEADER: \usetheme{CambridgeUS}
#+LATEX_HEADER: \setbeamertemplate{navigation symbols}{} % pas de barre de navigation
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lmodern}
#+LATEX_HEADER: \usepackage[matha,mathb]{mathabx}
#+LATEX_HEADER: \usepackage{subfig}
#+LATEX_HEADER: \usepackage{mdframed}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usemintedstyle{friendly} % set style if needed, see https://frama.link/jfRr8Lpj
#+LATEX_HEADER: \mdfdefinestyle{mystyle}{linecolor=gray!30,backgroundcolor=gray!30}
#+LATEX_HEADER: \BeforeBeginEnvironment{minted}{%
#+LATEX_HEADER: \small \begin{mdframed}[style=mystyle]}
#+LATEX_HEADER: \AfterEndEnvironment{minted}{%
#+LATEX_HEADER: \end{mdframed} \medskip \normalsize}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{url}
#+LATEX_HEADER: %% Formatting of verbatim outputs (i.e., outputs of R results):
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{%
#+LATEX_HEADER:   fontsize = \small,
#+LATEX_HEADER:   frame = leftline,
#+LATEX_HEADER:   formatcom = {\color{gray!97}}
#+LATEX_HEADER: }
#+LATEX_HEADER: \setbeamertemplate{caption}[numbered]
#+LATEX_HEADER: %% Perso colors
#+LATEX_HEADER: \definecolor{PalePurple}{RGB}{127, 90, 182}
#+LATEX_HEADER: \definecolor{DarkPurple}{RGB}{98, 36, 134}
#+LATEX_HEADER: \definecolor{grey}{RGB}{51, 63, 72}
#+LATEX_HEADER: \setbeamercolor{title}{fg=white, bg=DarkPurple}
#+LATEX_HEADER: \setbeamercolor{frametitle}{fg=black}
#+LATEX_HEADER: \setbeamercolor{structure}{fg=PalePurple}
#+LATEX_HEADER: \setbeamercolor{section in head/foot}{fg=white, bg=PalePurple}
#+LATEX_HEADER: \setbeamercolor{subsection in head/foot}{fg=DarkPurple}
#+LATEX_HEADER: \setbeamercolor{title in head/foot}{fg=white, bg=DarkPurple}
#+LATEX_HEADER: \setbeamercolor{date in head/foot}{fg=grey}
#+LATEX_HEADER: \setbeamercolor{block title}{fg=white, bg=DarkPurple}
#+LATEX_HEADER: \setbeamercolor{block body}{bg=gray!20}
#+LATEX_HEADER: %% Structure of a slide :
#+LATEX_HEADER: \setbeamertemplate{footline}
#+LATEX_HEADER: {
#+LATEX_HEADER: \leavevmode%
#+LATEX_HEADER: \hbox{%
#+LATEX_HEADER: \begin{beamercolorbox}[wd=.75\paperwidth,ht=2.25ex,dp=1ex,center]{title in head/foot}%
#+LATEX_HEADER:\usebeamerfont{author in head/foot}\inserttitle
#+LATEX_HEADER:\end{beamercolorbox}%
#+LATEX_HEADER: %\begin{beamercolorbox}[wd=.3\paperwidth,ht=2.25ex,dp=1ex,center]{section in head/foot}%
#+LATEX_HEADER: %\usebeamerfont{title in head/foot}\insertsection
#+LATEX_HEADER: %\end{beamercolorbox}%
#+LATEX_HEADER: \begin{beamercolorbox}[wd=.25\paperwidth,ht=2.25ex,dp=1ex,center]{date in head/foot}%
#+LATEX_HEADER: \insertframenumber{} / \inserttotalframenumber\hspace*{1ex}
#+LATEX_HEADER:  \end{beamercolorbox}}%
#+LATEX_HEADER:  \vskip0pt%
#+LATEX_HEADER: }
#+LATEX_HEADER: \DeclareUnicodeCharacter{2514}{\mbox{\kern.23em \vrule height2.2exdepth-1.8ptwidth.4pt\vrule height2.2ptdepth-1.8ptwidth.23em}}
#+LATEX_HEADER: \DeclareUnicodeCharacter{2500}{\mbox{\vrule height2.2ptdepth-1.8ptwidth.5em}}
#+LATEX_HEADER: \setlength{\parskip}{5pt}


* Introductory words
** Filling your Emacs init file
*** A word about ~use-package~
In this document, several pieces of Emacs Lisp code will be proposed so that you can use them in your init file.

It is assumed that you use [[https://jwiegley.github.io/use-package/][~use-package~]] for your init file: the Emacs Lisp code can be adapted in a straightforward manner if you do not use it.

As a reminder, this is the minimal code to add in your init file so as to use ~use-package~, once it has been installed:

#+begin_src emacs-lisp :eval no
;; Make sure that use-package is installed:
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
;; Load use-package:
(eval-when-compile
  (require 'use-package))
#+end_src

* ESS customization
** Visibility of evaluation
** Window management
** Syntax highlighting
** Syntax checker
** Rdired buffers

* Some useful Emacs packages
** company
** company-quickhelp
*** Documentation popups
    :PROPERTIES:
    :BEAMER_opt: allowframebreaks,label=
    :END:
[[https://github.com/company-mode/company-quickhelp][~company-quickhelp~]] allows for documentation popups, e.g. to further describe function arguments.

#+CAPTION: Documentation popups with ~company-quickhelp~.
#+ATTR_LATEX: :width \textwidth
[[./images/company-quickhelp.png]]

The minimal elisp code to add to your init file is straightforward:

#+begin_src emacs-lisp :eval no
(use-package company-quickhelp
  :ensure t
  :config
  ;; Load company-quickhelp globally:
  (company-quickhelp-mode)
  ;; Time before display of documentation popup:
  (setq company-quickhelp-delay 0.3))
#+end_src

By default, the documentation popup is shown automatically. You can adjust the time before the popup shows up by customizing the variable ~company-quickhelp-delay~.

** yasnippet
*** Code snippets
[[https://github.com/joaotavora/yasnippet][~yasnippet~]] is an Emacs package allowing for the expansion of whole pieces of code you often use (/snippets/) from one given abbreviation. 

**** Key features of ~yasnippet~
- All code snippets are stored as plain-text files in one given directory, so that they are easy to share with other people, and can be easily version controlled.
- As a corollary, it is also easy to retrieve and use large collection of snippets already available online. For instance, Andrea Crotti maintains a great collection available at https://github.com/AndreaCrotti/yasnippet-snippets.
- Although we only demonstrate its use within ESS and R here, note that ~yasnippet~ is not an R-specific solution, and that you can use it for any other programming language.

*** Setting up ~yasnippet~
    :PROPERTIES:
    :BEAMER_opt: allowframebreaks,label=
    :END:
To set up ~yasnippet~, proceed through the following steps:

1. Create a directory ~snippets/~ at some convenient location, and add a subfolder ~ess-r-mode/~ in this directory.
2. Add the minimal following code in your init file:
   #+begin_src emacs-lisp :results output
(use-package yasnippet
  :ensure t
  :config
  ;; Indicate the directory containing your snippets:
  (setq yas-snippet-dirs '("path/to/your/snippets"))
  ;; Load your snippets on startup:
  (yas-reload-all)
  ;; Turn on yasnippet (minor) mode when editing R files:
  (add-hook 'ess-r-mode-hook #'yas-minor-mode))
   #+end_src
3. You can now fill your ~snippets/ess-r-mode/~ directory with your own snippets. For instance, create a file ~function~ (without any extension) in this directory, with the following contents:
   #+begin_example
#name : function
#key : fun
# --
${1:name} <- function(${2:args}) {
    ${3:body}
}
   #+end_example
   Each snippet has a unique ~name~, and can be triggered by typing a given ~key~ (followed by ~TAB~). As we will see later on, the present snippet allows for the expansion of a template for defining new R functions more easily. The ~yasnippet~ manual gives more details about the expected syntax to define your own code snippets: http://joaotavora.github.io/yasnippet/.

4. Now your ~snippets~ directory should look like:
   #+begin_example
└── snippets
    └── ess-r-mode
        └── function
   #+end_example

   Feel free to add or retrieve (a lot!) more snippets, i.e. to add more template files within the ~ess-r-mode~ sub-directory.

*** Using ~yasnippet~ in an ESS[R] buffer
While you are editing an R source file with ESS, each snippet can be triggered by typing its ~key~ and then pressing ~TAB~. You can then navigate through the placeholders of the expanded template by pressing ~TAB~ again.

For instance, with our previously defined snippet, typing ~fun~ followed by ~TAB~ will expand the full ~function~ template; you will then be able to specify easily a value for each of the three placeholders (the function's ~name~, its ~args~ and ~body~).

Note that ~yasnippet~ has a short video tutorial, available at https://www.youtube.com/watch?v=ZCGmZK4V7Sg.
